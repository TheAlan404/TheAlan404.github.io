import { useEffect, useRef, useState } from "react";
import { createMists } from "../mists";
import { createStarfields, Starfield, STARFIELD_SCALE, updateStar } from "../farewell/starfields";
import { vec2, vec2add, vec2mul, Vec2, vec2eq } from "@alan404/vec2";
import { useCanvasWebGL } from "./useCanvasWebGL";
import { FarewellBackgroundEffect } from "../farewell/FarewellBackgroundEffect";
import { clamp, useHotkeys } from "@mantine/hooks";

export const EffectsAAAAAAAAAOLD = () => {
    const disable = false;


    const isReady = false //useImagesReady(MistTextures);

    const opacityBurstRef = useRef<number>(Date.now());
    const speedBurstRef = useRef<number>(0);

    useHotkeys([
        ["w", () => {
            opacityBurstRef.current = Date.now();
            speedBurstRef.current = Date.now();
        }],
    ]);

    // Mist
    const mists = createMists();
    const mistRefs = useRef<(HTMLDivElement | null)[]>(mists.map(() => null));
    const mistPositions = useRef<Vec2[]>(mists.map(_ => vec2(0, 0)));

    // Starfield
    //const starfieldRef = useRef<HTMLCanvasElement>(null);
    const starfields = useRef<Starfield[]>([]);

    const canvasRef = useCanvasWebGL({
        fps: 0.2,
        initializeStore: (gl) => [
            new FarewellBackgroundEffect(gl),
        ],
        disposeStore: (gl, store) => {
            // gl.deleteProgram(store.program);
            // for(let tex of store.textures) gl.deleteTexture(tex);
        },
        render(gl, store, dt) {
            if (disable) return;

            // Mist
            // for (let i = 0; i < mists.length; i++) {
            //     const mist = mists[i];
            //     mistPositions.current[i] = vec2add(mistPositions.current[i], vec2mul(mist.speed, vec2(dt * 100)));
            //     let ref = mistRefs.current[i];
            //     let x = mistPositions.current[i].x;
            //     let y = mistPositions.current[i].y - window.scrollY * mist.scroll.y;
            //     //x = x % window.innerWidth;
            //     //y = y % window.innerHeight;
            //     if (ref)
            //         //ref.style.transform = transform;
            //         ref.style.backgroundPosition = `${Math.round(x)}px ${Math.round(y)}px`;
            // }

            // Starfields

            let currentDim = {
                x: (gl.canvas as HTMLCanvasElement).clientWidth / STARFIELD_SCALE,
                y: (gl.canvas as HTMLCanvasElement).clientHeight / STARFIELD_SCALE,
            };

            for (let effect of store) {
                if (!vec2eq(currentDim, effect.dimensions)) {
                    effect.onDimensionsChange(currentDim);
                }

                if (effect instanceof FarewellBackgroundEffect) {
                    effect.globalPosition.y = window.scrollY / effect.scale;
                }

                try {
                    effect.update(dt);
                    effect.render();
                } catch (e) {
                    console.log("Render error", e);
                }
            }
        },
    });

    return (
        <div>
            <canvas
                className="pageBackground"
                style={{
                    width: `${100 / STARFIELD_SCALE}vw`,
                    height: `${100 / STARFIELD_SCALE}vh`,
                    transformOrigin: "0 0",
                    transform: `scale(${STARFIELD_SCALE})`,
                    imageRendering: "pixelated",
                }}
                ref={canvasRef}
            />
        </div>
    )
};

